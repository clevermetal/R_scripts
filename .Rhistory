install.packages(ggplot)
install.packages("ggplot2")
?boxplot
?ggplot2
LE_Af<-gapminder$lifeExp[which(gapminder$continent=="Africa")]
boxplot(gapminder$lifeExp ~ gapminder$continent)
boxplot(gapminder$lifeExp ~ gapminder$continent, col="red")
boxplot(gapminder$lifeExp ~ gapminder$continent, col="red", col="blue")
boxplot(gapminder$lifeExp ~ gapminder$continent, col="red")
boxplot(gapminder$lifeExp ~ gapminder$continent, col=colorVec)
colorVec=c("red","blue","green","brown", "yellow")
boxplot(gapminder$lifeExp ~ gapminder$continent, col=colorVec)
boxplot(gapminder$lifeExp ~ gapminder$country)
boxplot(gapminder$lifeExp ~ gapminder$country[which(gapminder$continent=="Africa")])
Test<-which(gapminder$continent=="Africa")
Test
Test<-which(gapminder$continent=="Africa")
boxplot(gapminder$lifeExp ~ gapminder$country[Test])
boxplot(gapminder$lifeExp[Test] ~ gapminder$country[Test])
gapminder$country[Test]
boxplot(gapminder$lifeExp[Test] ~ gapminder$country[Test])
boxplot(gapminder$lifeExp ~ gapminder$country)
gapminder$country[Test]
levels(gapminder$country[Test])
gapminder$country[Test]
levels(gapminder$country[Test])
Test<-which(gapminder$continent=="Africa",drop=TRUE)
levels(gapminder$country[Test], drop=TRUE
levels(gapminder$country[Test], drop=TRUE)
levels(gapminder$country[Test])
?levels
gapminder$country[Test]
New<-gapminder$country[Test]
New<-gapminder$country[Test]
New
levels(New)
New<-gapminder$country[Test]
New
New[1,3]
New[1,1]
New[1]
New[1]
New
New
New[5]
New[5]
levels(gapminder$continent)
levels(gapminder$continent=="Africa")
Africa_data<- gapminder[gapminder$continent=="Africa", ]
Africa_data
levels(Africa_data)
levels(Africa_data$continent)
levels(Africa_data$country)
Africa_data
Africa_data<- gapminder[gapminder$continent=="Africa", drop=TRUE]
Africa_data<- gapminder[Africa_data$country, drop=TRUE]
Africa_data<- gapminder[Africa_data$country[, drop=TRUE]
Africa_data<- gapminder[Africa_data$country[, drop=TRUE]
library(gapminder)
library(ggplot)
library(gapminder)
boxplot(gapminder$lifeExp ~ gapminder$country)
Africa_data<- gapminder[Africa_data$country[, drop=TRUE]
Africa_data
Africa_data<- gapminder[Africa_data$country[, drop=TRUE]
Africa_data<- gapminder[Africa_data$country[, drop=TRUE]
Africa_data<- gapminder[Africa_data$country[, drop=TRUE]
boxplot(gapminder$lifeExp ~ gapminder$country)
library(gapminder)
boxplot(gapminder$lifeExp ~ gapminder$country)
Africa_data$country<-Africa_data$country[, drop=TRUE]
levels(Africa_data$country)
rm(list = ls())
library(gapminder)
boxplot(gapminder$lifeExp ~ gapminder$country)
Africa_data$country<-Africa_data$country[, drop=TRUE]
Africa_data<-gapminder$country[gapminder$continent=="Africa"]
Africa_data$country<-Africa_data$country[, drop=TRUE]
levels(Africa_data$country)
Africa_data<-gapminder$country[gapminder$continent=="Africa"]
Africa_data
Africa_data$country
Africa_data<-gapminder[gapminder$continent=="Africa"]
Africa_data<-gapminder[gapminder$continent=="Africa",]
Africa_data
Africa_data$country
Africa_data$country[,drop=TRUE]
levels(Africa_data$country)
levels(Africa_data$country[,drop=TRUE])
levels(Africa_data$country[,drop=TRUE]) #Drop unused levels from a dataframe!!!!
fivenum(gapminder$lifeExp ~ gapminder$country)
Africa_data<-Africa_data$country[,drop=TRUE]
levels(Africa_data) #Drop unused levels from a dataframe!!!!
Africa_data<-gapminder[gapminder$continent=="Africa",]
Africa_data<-Africa_data$country[,drop=TRUE]
boxplot(Africa_data$lifeExp)
Africa_data<-gapminder[gapminder$continent=="Africa",]
Africa_data<-gapminder[gapminder$continent=="Africa",]
Africa_data$country<-Africa_data$country[,drop=TRUE]
levels(Africa_data$country) #Drop unused levels from a dataframe!!!!
Africa_data$continent<-Africa_data$continent[,drop=TRUE]
boxplot(Africa_data$lifeExp~Africa_data$country)
fivenum(Africa_data$lifeExp~Africa_data$country)
boxplot(Africa_data$lifeExp~Africa_data$country)
?tapply
?sapply
?tapply
medianVal<-(Africa_data$lifeExp,Africa_data$country , median
medianVal<-(Africa_data$lifeExp,Africa_data$country , median)
medianVal<-tapply(Africa_data$lifeExp,Africa_data$country , median)
medianVal
medianVal[1]
medianVal[2]
medianVal[4]
max(medianVal)
max(medianVal)
fivenum(medianVal)[5]
fivenum(medianVal)
?fivenum
fivenum(medianVal)
SouthAf<-which(Africa_data$country=="South Africa")
SouthAf
Africa_data[SouthAf]
SouthAf
Africa_data[SouthAf]
Africa_data$\[SouthAf]
Africa_data$lifeExp[SouthAf]
SA_med<-median(Africa_data$lifeExp[SouthAf])
SA_med
?abline
Africa_data
abline(SA_med,0)
boxplot(Africa_data$lifeExp~Africa_data$country)
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0)
abline(SA_med,0, lty=2)
data$lifeExp~Africa_data$country)
boxplot(Africa_data$lifeExp~Africa_data$country)
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2)
abline(SA_med,0, lty=2, col="red")
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
?legend
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
legend("bottomleft", legend = "Median SA Life Expectancy", bty=0)
legend("bottomleft", legend = "Median SA Life Expectancy", bty=NULL)
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
legend("bottomleft", legend = "Median SA Life Expectancy", bty=NULL)
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
legend("bottomleft", legend = "Median SA Life Expectancy", bty=n)
A_med<-median(Africa_data$lifeExp[SouthAf])
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
legend("bottomleft", legend = "Median SA Life Expectancy", bty="n")
SA_med<-median(Africa_data$lifeExp[SouthAf])
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
legend("bottomleft", legend = "Median SA Life Expectancy", bty="n")
rm(list = ls())
library(gapminder)
boxplot(gapminder$lifeExp ~ gapminder$country)
Africa_data<-gapminder[gapminder$continent=="Africa",]
Africa_data$country<-Africa_data$country[,drop=TRUE]
levels(Africa_data$country) #Drop unused levels from a dataframe!!!!
Africa_data$continent<-Africa_data$continent[,drop=TRUE]
boxplot(Africa_data$lifeExp~Africa_data$country)
medianVal<-tapply(Africa_data$lifeExp,Africa_data$country , median)
fivenum(medianVal)
SouthAf<-which(Africa_data$country=="South Africa")
SouthAf
SA_med<-median(Africa_data$lifeExp[SouthAf])
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
legend("bottomleft", col="red", lty=2 legend = "Median SA Life Expectancy", bty="n")
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
legend("bottomleft", col="red", lty=2 legend = "Median SA Life Expectancy", bty="n")
boxplot(Africa_data$lifeExp~Africa_data$country)
abline(SA_med,0, lty=2, col="red")
legend("bottomleft", col="red", lty=2 ,legend = "Median SA Life Expectancy", bty="n")
plot(Africa_data$lifeExp[SouthAf],Africa_data$year)
plot(Africa_data$lifeExp[SouthAf],Africa_data$year[SouthAf])
plot(Africa_data$year[SouthAf],Africa_data$lifeExp[SouthAf])
plot(Africa_data$year[SouthAf],Africa_data$lifeExp[SouthAf], ylim = c(30, 65))
plot(Africa_data$year[SouthAf],Africa_data$lifeExp[SouthAf], ylim = c(30, 65))
gedwd
getwd
getwd()
install.packages("openxlsx")
qls<-read.xlsx("QLS2017.xlsx")
?openxlsx::
?openxlsx
read.xlsx('QLS2017.xlsx')
install.packages("readxl")
test<-read.xlsx('QLS2017.xlsx')
test<-read.xlsx('QLS2017.xlsx')
test
?read.xlsx
?read.xlsx
test<-read.xlsx('QLS2017.xlsx')
require(openxlsx)
qhs<-read.xlsx('QLS2017.xlsx')
head(qhs)
qhs
colnames(qhs)
?class
class(qhs[1,1])
typeof(qhs[1,1])
colnames(qhs)
typeof(qhs[1,1])
typeof(qhs[,1])
typeof(qhs[,2])
typeof(qhs[,3])
typeof(qhs[,4])
class(qhs[,4])
?apply
apply(qhs,2,class)
apply(qhs,2,typeof)
nrow(qhs)
head(qhs)
colnames(qhs)
?colmeans
?colMeans
colSums(qhs)
colSums(qhs[,3])
colSums(qhs)
qhs
colnames(qhs)
mean(qhs[,11])
mean(qhs[,"Q418HRSWRK"])
colnames(qhs)
mean(qhs[,"Q418HRSWRK"])
qhs$Q418HRSWRK<-as.numeric(as.character(qhs$Q418HRSWRK))
qhs$Q418HRSWRK
qhs<-read.xlsx('QLS2017.xlsx')
colnames(qhs)
qhs$Q418HRSWRK
qhs$Q418HRSWRK<-as.numeric(as.character(qhs$Q418HRSWRK))
qhs$Q418HRSWRK
mean(qhs[,"Q418HRSWRK"])
?as.numeric
class(qhs$Q418HRSWRK)<-"numeric"
qhs$Q418HRSWRK
sum(is.na(qhs$Q418HRSWRK))
par(mfrow=c(1,2)), mar=c(2,2,2,2)
par(mfrow=c(1,2)), mar=c(2,2,2,2))
par(mfrow=c(1,2)), mar=c(2,2,2,2))
par(mfrow=c(1,2), mar=c(2,2,2,2))
hist(qhs$Q418HRSWRK,probability = T)
hist(qhs$Q418HRSWRK,probability = T, break=20)
hist(qhs$Q418HRSWRK,probability = T, breaks=20)
hist(qhs$Q418HRSWRK,probability = T, breaks=10)
hist(qhs$Q418HRSWRK,probability = T, breaks=100)
hist(qhs$Q418HRSWRK,probability = T, breaks=20)
hist(qhs$Q418HRSWRK,probability = T, breaks=10)
hist(qhs$Q418HRSWRK,probability = T, breaks=20)
hist(qhs$Q418HRSWRK,probability = T, breaks=30)
hist(qhs$Q418HRSWRK,probability = T, breaks=30)
hist(qhs$Q418HRSWRK,probability = T, breaks=50)
hist(qhs$Q418HRSWRK,probability = T, breaks=30)
hist(qhs$Q418HRSWRK, breaks=30)
probability = T
par(mfrow=c(1,2), mar=c(2,2,2,2))
hist(qhs$Q418HRSWRK,probability = T, breaks=30)
boxplot(qhs$Q418HRSWRK)
par(mfrow=c(1,2), mar=c(2,2,2,2))
hist(qhs$Q418HRSWRK,probability = T, breaks=30)
boxplot(qhs$Q418HRSWRK)
par(mfrow=c(1,2), mar=c(2,2,2,2))
hist(qhs$Q418HRSWRK,probability = T, breaks=30, main="Histogram")
boxplot(qhs$Q418HRSWRK, main="Boxplot")
mean(qhs$Q418HRSWRK,na.rm = TRUE)
median(qhs$Q418HRSWRK,na.rm = TRUE)
?na.omit
?na.omit
Q418HRSWRK_new<-na.omit(qhs$Q418HRSWRK)
Q418HRSWRK_new
length(Q418HRSWRK_new)
?sample()
samples<sample(Q418HRSWRK_new,100)
samplesMean<sample(Q418HRSWRK_new,100)
samplesMean<-0
samplesMean<sample(Q418HRSWRK_new,100)
samplesMean<sample(Q418HRSWRK_new,100)
sample(Q418HRSWRK_new,100)
testvec<-sample(Q418HRSWRK_new,100)
samplesMean<-sample(Q418HRSWRK_new,100)
mean(sample(Q418HRSWRK_new,100)
mean(sample(Q418HRSWRK_new,100)
mean(sample(Q418HRSWRK_new,100)
Q418HRSWRK_new<-na.omit(qhs$Q418HRSWRK)
mean(sample(Q418HRSWRK_new,100)
Q418HRSWRK_new<-na.omit(qhs$Q418HRSWRK)
boxplot(qhs$Q418HRSWRK, main="Boxplot")
Q418HRSWRK_new<-na.omit(qhs$Q418HRSWRK)
mean(sample(Q418HRSWRK_new,100)
sample(Q418HRSWRK_new,100)
sample(Q418HRSWRK_new,100)
sample(Q418HRSWRK_new,100)
mean(sample(Q418HRSWRK_new,100))
replicate(mean(sample(Q418HRSWRK_new,100)),100)
meanVals<-replicate(100, mean(sample(Q418HRSWRK_new,100)))
meanVals
meanVals<-replicate(100, mean(sample(Q418HRSWRK_new,100)))
hist(meanVals,prob=TRUE,breaks=30,main="Mean Distribution")
meanVals<-replicate(1000, mean(sample(Q418HRSWRK_new,100)))
hist(meanVals,prob=TRUE,breaks=30,main="Mean Distribution")
meanVals<-replicate(1000, mean(sample(Q418HRSWRK_new,1000)))
hist(meanVals,prob=TRUE,breaks=30,main="Mean Distribution")
hist(meanVals,prob=TRUE,breaks=300,main="Mean Distribution")
hist(meanVals,prob=TRUE,breaks=30,main="Mean Distribution")
meanVals<-replicate(1000, mean(sample(Q418HRSWRK_new,1000)))
hist(meanVals,prob=TRUE,breaks=30,main="Mean Distribution")
length(Q418HRSWRK)
length(Q418HRSWRK_new)
meanVals<-replicate(1000, mean(sample(Q418HRSWRK_new,1000)))
hist(meanVals,prob=TRUE,breaks=30,main="Mean Distribution")
length(Q418HRSWRK_new)
sample(Q418HRSWRK_new)
length(sample(Q418HRSWRK_new))
length(sample(Q418HRSWRK_new), replace=TRUE)
length(sample(Q418HRSWRK_new, replace=TRUE))
sample(Q418HRSWRK_new, replace=TRUE)
means2<-replicate(1000, sample(Q418HRSWRK_new, replace=TRUE))
means2<-replicate(1000, sample(Q418HRSWRK_new, replace=TRUE))
means2
meanVals<-replicate(1000, mean(sample(Q418HRSWRK_new,replace = TRUE)))
hist(meanVals,prob=TRUE,breaks=30,main="Mean Distribution")
meanVals<-replicate(5000, mean(sample(Q418HRSWRK_new,replace = TRUE)))
hist(meanVals,prob=TRUE,breaks=30,main="Mean Distribution")
quantile(meanVals,prob=c(0.025,0.975))
head(qhs)
colnames(qhs)
boxplot(class(qhs$Q418HRSWRK)<-"numeric" ~ qhs$Province)
boxplot(qhs$Q418HRSWRK ~ qhs$Province)
GauRows<-which(qhs$Province=="Gauteng")
GauRows
GauRows<-which(qhs$Province=="Gauteng")
which(qhs$Province=="Gauteng")
GauRows<-which(qhs$Province=="Gauteng")
qhs$Q418HRSWRK[GauRows]
GauHours<-na.omit(qhs$Q418HRSWRK[GauRows])
GauHours
GauSample<-sample(GauHours,replace = TRUE)
GauRows<-which(qhs$Province=="Gauteng")
GauHours<-na.omit(qhs$Q418HRSWRK[GauRows])
GauSample<-sample(GauHours,replace = TRUE)
replicate(5000, mean(sample(GauHours,replace = TRUE)))
meansGau<-replicate(5000, mean(sample(GauHours,replace = TRUE)))
hist(meansGau,probability = TRUE,"Gauteng Means",xlab = xbar,)
hist(meansGau,probability = TRUE,"Gauteng Means")
meansGau
plot(meansGau)
hist(meansGau)
hist(meansGau,prob=T)
plot(density(meansGau))
plot(cars)
?plot
getwd
getwd()
?nim
??nim
?nim
??nim
setwd("~/R_scripts")
getwd()
read.delim("bigcity.dat")
bigcity<-read.delim("bigcity.dat")
bigcity<-read.delim("bigcity.dat")
bigcity
?nlm
demo(nlm)
bigcity
?nlm
nlm(bigcity)
nlm(bigcity, c(10,10))
bigcity
days<-c(0,8,28,41,63,79,97,117,135,154)
beetles<-c(2,47,192,256,768,896,1120,896,1184,1024)
days
beetles
plot(days,beetles,type="l",main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="red)"
plot(days,beetles,type="l",main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="red)"
plot(days,beetles,type="l",main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="red)")
plot(days,beetles,type="l",main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="red")
logl=function(par, n0, days, bt)
{
#par = c(K, r)
#K represents the carrying capacity >0
#r = growth rate >0
#n0= number of beetles on day 0 - Assume we know it
#bt = number of beetles
K=par[1]
r=par[2]
s2=1
n=length(days)
yt = log(bt)
mt = log(K) + log(n0) -log(n0 + (K-n0)*exp(-r*days))
logl =-0.5*n*log(s2) -0.5*sum( (yt-mt)^2 )/s2
return(-logl)
}
log(1)
days<-c(0,8,28,41,63,79,97,117,135,154)
plot(days,beetles,type="l",main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="red") #Population is growing
testx
?nlm
error_ft<-function(param, x0, days, beetles){
Num<-param[1]*x0
Den<-x0+(param[1]-x0)*exp(param[2]*days)
Error_vec<-beetles-(Num/Den)
return(Error_vec^2)
}
error_ft<-function(param, x0, days, beetles){
Num<-param[1]*x0
Den<-x0+(param[1]-x0)*exp(param[2]*days)
Error_vec<-beetles-(Num/Den)
return(Error_vec^2)
}
#Always remember that the values you want to min/max put in par vector
?nlm
fitmin<-nlm(error_ft, c(10,10), x0=2, days=days, beetles=beetles)
fitmin<-nlm(error_ft, p=c(10,10), x0=2, days=days, beetles=beetles)
error_ft<-function(param, x0, days, beetles){
Num<-param[1]*x0
Den<-x0+(param[1]-x0)*exp(-param[2]*days)
Error_vec<-beetles-(Num/Den)
return(Error_vec^2)
}
fitmin<-nlm(error_ft, p=c(10,10), x0=2, days=days, beetles=beetles)
fit2=nlm(error_ft, p=c(1200, .5), x0=2, days=days, bt=bt)
fit2=nlm(error_ft, p=c(1200, .5), x0=2, days=days, beetles=beetles)
error_ft<-function(param, x0, days, beetles){
Num<-param[1]*x0
Den<-x0+(param[1]-x0)*exp(-1*param[2]*days)
Error_vec<-beetles-(Num/Den)
return(sum(Error_vec^2))
}
fit2=nlm(error_ft, p=c(1200, .5), x0=2, days=days, beetles=beetles)
fitmin<-nlm(error_ft, p=c(10,10), x0=2, days=days, beetles=beetles)
fitmin
fitmin$minimum
fitmin<-nlm(error_ft, p=c(1200,0.5), x0=2, days=days, beetles=beetles)
fitmin$minimum
fitmin<-nlm(error_ft, p=c(1200,0.5), x0=2, days=days, beetles=beetles)
fitmin$minimum
bt<-c(2,47,192,256,768,896,1120,896,1184,1024)
logfun=function(par, n0, days, bt)
{
K=par[1]
r=par[2]
error_vec = bt-K*n0/(n0 + (K-n0)*exp(-r*days))
sse = sum(error_vec^2)
return(sse) #ensure that this is a constant and not a vector
}
fit2=nlm(logfun, p=c(1200, .5), n0=2, days=days, bt=bt)
fit2
fitmin$minimum
fitmin
fitmin<-nlm(error_ft, p=c(10,0.5), x0=2, days=days, beetles=beetles)
fitmin
fitmin<-nlm(error_ft, p=c(500,1), x0=2, days=days, beetles=beetles)
fitmin
fitmin<-nlm(error_ft, p=c(1000,2), x0=2, days=days, beetles=beetles)
fitmin
#Now we want to actually test the fitted values
Kval<-fitmin$estimate[1]
Rval<-fitmin$estimate[2]
days_seq<-seq(from=0,to=150, length.out = 500)
fiited<-Kval*2/(2+(Kval-2)*exp(-Rval*days_seq)
lines(days_seq,fitted,lty="2", col="red")
lines(days_seq,fitted,lty=2, col="red")
plot(days,beetles,type="l",main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="red")
plot(days,beetles,main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="red")
plot(days,beetles,main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="green")
plot(days,beetles,main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="black")
lines(days_seq,fitted,lty=2, col="blue")
fitted<-Kval*2/(2+(Kval-2)*exp(-Rval*days_seq)
lines(days_seq,fitted,lty=2, col="blue")
lines(days_seq,fitted,lty=2, col="blue")
fitted<-Kval*2/(2+(Kval-2)*exp(-Rval*days_seq)
lines(days_seq,fitted,lty=2, col="blue")
fitted<-Kval*2/(2+(Kval-2)*exp(-Rval*days_seq)
plot(days,beetles,main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="black")
Kval<-fitmin$estimate[1]
Rval<-fitmin$estimate[2]
days_seq<-seq(from=0,to=150, length.out = 500)
fitted<-Kval*2/(2+(Kval-2)*exp(-Rval*days_seq)
plot(days,beetles,main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="black")
#Now we want to actually test the fitted values
Kval<-fitmin$estimate[1]
Rval<-fitmin$estimate[2]
days_seq<-seq(from=0,to=150, length.out = 500)
fitted<-(Kval*2)/(2+(Kval-2)*exp(-Rval*days_seq))
plot(days,beetles,main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="black")
lines(days_seq,fitted,lty=2, col="blue")
Kval<-fitmin$estimate[1]
Rval<-fitmin$estimate[2]
days_seq<-seq(from=0,to=150, length.out = 500)
fitted<-(Kval*2)/(2+(Kval-2)*exp(-Rval*days_seq))
plot(days,beetles,main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="black")
lines(days_seq,fitted,lty=2, col="blue")
legend("bottomright",legend = "logistic fitted values", lty=2,col="red",bty="n")
plot(days,beetles,main="Beetles over time",xlab = "Days",ylab = "Beetles no.",col="black")
lines(days_seq,fitted,lty=2, col="blue")
legend("bottomright",legend = "logistic fitted values", lty=2,col="red",bty="n")
\(N_t \sim N( f_t, \sigma^2)\)
?nlm
?optim
